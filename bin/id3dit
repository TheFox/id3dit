#!/usr/bin/env ruby
# coding: UTF-8

# WHY? WHHHHHYY is there no other solution
# to load requirements from the project directory?
Dir.chdir(File.expand_path('..', __dir__)) do
	require 'bundler/setup'
	require 'id3lib'
	require 'highline/import'
	require 'rainbow'
	require 'id3dit'
end

options = {
	:interactive => true,
}
opts = OptionParser.new do |opts|
	opts.banner =<<EOB
#{ID3dit::NAME} #{ID3dit::VERSION}
Usage: id3dit [OPTIONS...] FILES...
EOB
	
	opts.separator('')
	opts.separator('Options:')
	
	ID3dit::USED_TAGS.each do |tag_name, tag|
		opts.on("--#{tag_name} STRING", "Set new value for '#{tag_name}' tag. (#{tag[:id]})") do |v|
			options[:interactive] = false
			options["set_tag_#{tag_name}"] = v
		end
	end
	
	opts.on('-r', '--remove-all', 'Remove all tags.') do |v|
		options[:interactive] = false
		options['remove_all_tags'] = true
	end
	ID3dit::USED_TAGS.each do |tag_name, tag|
		opts.on("--remove-#{tag_name}", "Remove '#{tag_name}' tag. (#{tag[:id]})") do |v|
			options[:interactive] = false
			options["remove_tag_#{tag_name}"] = v
		end
	end
	
	opts.on_tail('--version', 'Show version.') do
		puts "#{ID3dit::NAME} #{ID3dit::VERSION}"
		puts ID3dit::HOMEPAGE
		exit
	end
	
	opts.on_tail('-h', '--help', 'Show this message.') do
		puts opts
		exit 3
	end
end

opts.parse(ARGV)

files = []
ARGV.each do |arg|
	if File.exist?(arg)
		files << arg
	end
end

if files.count == 0
	opts.parse(['-h'])
end

if options[:interactive]
	puts "#{ID3dit::NAME} #{ID3dit::VERSION}"
	
	tags = ID3dit::Tags.new(files.map{ |file| ID3Lib::Tag.new(file) })
	
	actions = ['i']
	while true
		case actions.pop
		when 'i'
			puts
			if files.count >= 2
				puts "#{files.count} songs selected."
			else
				puts "File '#{files.first}'."
			end
			
			puts
			if tags.are_set?
				tags.are_set.each do |tag_name, tag_infos|
					printf "%15s    ", tag_name
					if tag_infos[:is_mixed]
						print '< Mixed >'
					else
						print "'" + Rainbow(tag_infos[:old_value]).bright + "'"
					end
					if tag_infos[:has_changed]
						if tag_infos[:is_removed]
							print "  => remove"
						else
							print "  => '#{tag_infos[:new_value]}'"
						end
					end
					puts
				end
			else
				puts 'File(s) contain no ID3 tags.'
			end
		when 'e'
			puts
			puts 'Type new value for tags.'
			puts '- Leave blank for unchanged.'
			puts '- Leave input prematurely with "#".'
			puts
			
			has_set_tags = false
			pre_break = false
			tags.are_for_edit.each do |tag_name, tag_infos|
				has_set_tags = true
				
				printf "%15s    ", tag_name
				if tag_infos[:is_mixed]
					print '< Mixed >'
				else
					print "'" + Rainbow(tag_infos[:new_value].nil? ? tag_infos[:old_value] : tag_infos[:new_value]).bright + "'"
				end
				
				print '  >'
				new_val = ask('').strip
				if new_val != ''
					if new_val == '#'
						pre_break = true
						puts 'Break.'
						break
					end
					printf "%15s    '%s'\n", "New #{tag_name}", new_val
					tags[tag_name] = new_val
				end
			end
			
			show_unset_tags = false
			if has_set_tags
				if !pre_break
					puts
					res = ask('Edit more tags? [yN] ').strip.downcase
					if res == 'y'
						show_unset_tags = true
					end
				end
			else
				show_unset_tags = true
			end
			
			if show_unset_tags
				puts
				tags.are_for_further_edit.each do |tag_name, tag_infos|
					printf "%15s    ''  >", tag_name
					new_val = ask('').strip
					if new_val != ''
						if new_val == '#'
							pre_break = true
							puts 'Break.'
							break
						end
						printf "%15s    '%s'\n", "New #{tag_name}", new_val
						tags[tag_name] = new_val
					end
				end
			end
		when 'r'
			puts
			puts 'Remove tags.'
			puts '- Default is no on non-empty fields.'
			puts '- Leave input prematurely with "#".'
			puts
			
			tags.are_for_remove.each do |tag_name, tag_infos|
				printf "%15s    ", tag_name
				if tag_infos[:is_mixed]
					print '< Mixed >'
				else
					print "'" + Rainbow(tag_infos[:new_value].nil? ? tag_infos[:old_value] : tag_infos[:new_value]).bright + "'"
				end
				
				print '  ['
				default_v = 'n'
				if !tag_infos[:old_value].nil? && tag_infos[:old_value] != '' ||
					!tag_infos[:new_value].nil? && tag_infos[:new_value] != '' ||
					tag_infos[:is_mixed]
					print 'yN'
				else
					print 'Yn'
					default_v = 'y'
				end
				print '#]? '
				
				res = ask('').strip.downcase
				if res == ''
					res = default_v
				end
				if res == 'y' || res == 'r'
					printf "%15s\n", "Remove #{tag_name}"
					tags.delete(tag_name)
				elsif res == '#'
					puts 'Break.'
					break
				end
			end
		when 'x'
			actions << 'q'
			actions << 'w'
		when 'w'
			puts
			
			changes = tags.have_changed
			if changes.count > 0
				puts "Write #{changes.count} change(s)."
				files.each do |file|
					puts "Write file '#{file}'."
					
					tag = ID3Lib::Tag.new(file)
					changes.each do |tag_name, tag_infos|
						if tag_infos[:is_removed]
							used_tag = ID3dit::USED_TAGS[tag_name]
							tag.delete_if{ |frame| frame[:id] == used_tag[:id] }
						else
							tag.send("#{tag_name}=", tag_infos[:new_value])
						end
					end
					tag.update!
				end
				
				tags.update
			else
				puts 'Nothing has changed, no file(s) written.'
			end
		when 'q'
			puts 'Quitting.'
			break
		when '?'
			puts
			puts 'i - show all tags.'
			puts 'e - edit all tags.'
			puts 'r - remove tags.'
			puts 'x - same as wq.'
			puts 'w - write - after edit, apply changes to the files.'
			puts 'q - quit without saving.'
			puts '? - print help.'
		else
			puts "WARNING: invalid input. Type '?' for help."
		end
		
		next if actions.count > 0
		
		puts
		actions << ask('[ierxwq?] '){ |q|
			q.character = true
		}.downcase
	end
else
	files.each do |file|
		puts "Check file '#{file}'."
		
		changed = false
		tag = ID3Lib::Tag.new(file)
		options.select{ |tag_name, tag_value| /^set_tag_/.match(tag_name) }.each do |tag_name, tag_value|
			name = tag_name.sub(/^set_tag_/, '')
			tag.send("#{name}=", tag_value)
			changed = true
		end
		if options.has_key?('remove_all_tags')
			tag.delete_if{ true }
			changed = true
		else
			options.select{ |tag_name, tag_value| /^remove_tag_/.match(tag_name) }.each do |tag_name, tag_value|
				name = tag_name.sub(/^remove_tag_/, '')
				used_tag = ID3dit::USED_TAGS[name.to_sym]
				count = tag.count
				tag.delete_if{ |frame| frame[:id] == used_tag[:id] }
				
				changed = true if tag.count < count
			end
		end
		if changed
			puts "Write file '#{file}'."
			tag.update!
		end
	end
end
