#!/usr/bin/env ruby
# coding: UTF-8

# WHY? WHHHHHYY is there no other solution
# to load requirements from the project directory?
Dir.chdir(File.expand_path('..', __dir__)) do
	require 'bundler/setup'
	require 'id3lib'
	require 'highline/import'
	require 'rainbow'
end

options = {
	:interactive => true,
}
opts = OptionParser.new do |opts|
	opts.banner =<<EOB
ID3 tags editor
Usage: id3dit [OPTIONS...] FILES...
EOB
	
	opts.separator('')
	opts.separator('Options:')
	
	ID3dit::USED_TAGS.each do |tag_name|
		opts.on("--#{tag_name} STRING", "Set new value for '#{tag_name}' tag.") do |v|
			options[:interactive] = false
			options["set_tag_#{tag_name}"] = v
		end
	end
	
	opts.on('--remove-all', 'Remove all tags.') do |v|
		options[:interactive] = false
		options['remove_all_tags'] = true
	end
	ID3dit::USED_TAGS.each do |tag_name|
		opts.on("--remove-#{tag_name}", "Remove '#{tag_name}' tag.") do |v|
			options[:interactive] = false
			options["remove_tag_#{tag_name}"] = v
		end
	end
	
	opts.on_tail('--version', 'Show version.') do
		puts "#{ID3dit::NAME} #{ID3dit::VERSION}"
		puts ID3dit::HOMEPAGE
		exit
	end
	
	opts.on_tail('-h', '--help', 'Show this message.') do
		puts opts
		exit 3
	end
end

opts.parse(ARGV)

files = []
ARGV.each do |arg|
	if File.exist?(arg)
		files << arg
	end
end

if files.count == 0
	opts.parse(['-h'])
end

if options[:interactive]
	infos = ID3dit::USED_TAGS.map{ |t|
		[t, {
			:new_value => nil,
			:original_value => nil,
			:is_set => false,
			:is_mixed => false,
			:is_removed => false,
			:has_changed => false,
		}] }.to_h
	
	files.each do |file|
		tag = ID3Lib::Tag.new(file)
		
		infos.each do |tag_name, tag_infos|
			field = tag.send(tag_name)
			
			if tag_infos[:is_set]
				if !tag_infos[:is_mixed]
					if field != tag_infos[:new_value]
						tag_infos[:is_mixed] = true
						tag_infos[:new_value] = nil
					end
				end
			else
				tag_infos[:is_set] = true
				tag_infos[:new_value] = tag_infos[:original_value] = field
			end
		end
	end
	
	res = 'i'
	while true
		
		case res
		when 'i'
			if files.count >= 2
				puts
				puts "#{files.count} songs selected."
			end
			
			puts
			if infos.select{ |tag_name, tag_infos|
				tag_infos[:is_set] && (!tag_infos[:new_value].nil? || tag_infos[:is_mixed])
				}
				.count > 0
				
				infos.select{ |tag_name, tag_infos|
					tag_infos[:is_set] && (!tag_infos[:new_value].nil? || tag_infos[:is_mixed])
					}.each do |tag_name, tag_infos|
					
					printf "%15s    ", tag_name
					if tag_infos[:is_mixed]
						print '< Mixed >'
					else
						print "'" + Rainbow(tag_infos[:original_value]).bright + "'"
					end
					if tag_infos[:has_changed]
						if tag_infos[:is_removed]
							print "  => remove"
						else
							print "  => '#{tag_infos[:new_value]}'"
						end
					end
					puts
				end
			else
				puts 'File(s) contain no ID3 tags.'
			end
		when 'e'
			puts
			puts 'Type new value for tags. Leave blank for unchanged.'
			puts
			
			has_set_tags = false
			infos.select{ |tag_name, tag_infos|
				!tag_infos[:original_value].nil? || tag_infos[:has_changed]
				}.each do |tag_name, tag_infos|
				has_set_tags = true
				
				printf "%15s    ", tag_name
				if tag_infos[:is_mixed]
					print '< Mixed >'
				else
					print "'" + Rainbow(tag_infos[:new_value]).bright + "'"
				end
				
				print '  >'
				new_val = ask('')
				if new_val != ''
					printf "%15s    %s\n", "New #{tag_name}", new_val
					tag_infos[:has_changed] = true
					tag_infos[:is_removed] = false
					tag_infos[:new_value] = new_val
				end
			end
			
			show_unset_tags = false
			if has_set_tags
				puts
				res = ask('Edit more tags? [yn] ') do |q|
					q.default = 'n'
				end.downcase
				if res == 'y'
					show_unset_tags = true
				end
			else
				show_unset_tags = true
			end
			
			if show_unset_tags
				puts
				infos.select{ |tag_name, tag_infos|
					tag_infos[:original_value].nil? && !tag_infos[:has_changed]
					}.each do |tag_name, tag_infos|
					
					printf "%15s    ''  >", tag_name
					new_val = ask('')
					if new_val != ''
						printf "%15s    %s\n", "New #{tag_name}", new_val
						tag_infos[:has_changed] = true
						tag_infos[:is_removed] = false
						tag_infos[:new_value] = new_val
					end
				end
			end
		when 'r'
			puts
			puts 'Remove tags.'
			puts
			
			infos.select{ |tag_name, tag_infos|
				tag_infos[:is_set] && (!tag_infos[:new_value].nil? || tag_infos[:is_mixed]) && !tag_infos[:is_removed]
				}.each do |tag_name, tag_infos|
				
				printf "%15s    ", tag_name
				if tag_infos[:is_mixed]
					print '< Mixed >'
				else
					print "'" + Rainbow(tag_infos[:new_value]).bright + "'"
				end
				
				print '  [yN]? '
				res = ask('').downcase
				if res == 'y' || res == 'r'
					printf "%15s\n", "Remove #{tag_name}"
					tag_infos[:has_changed] = true
					tag_infos[:is_removed] = true
				end
			end
		when 'w'
			puts
			
			changed_infos = infos.select{ |tag_name, tag_infos| tag_infos[:has_changed] }
			if changed_infos.count > 0
				puts "Write #{changed_infos.count} change(s)."
				files.each do |file|
					puts "Write file '#{file}'."
					
					tag = ID3Lib::Tag.new(file)
					changed_infos.each do |tag_name, tag_infos|
						new_value = 
							if tag_infos[:is_removed]
								nil
							else
								tag_infos[:new_value]
							end
						
						tag.send("#{tag_name}=", new_value)
					end
					tag.update!
				end
				
				changed_infos.each do |tag_name, tag_infos|
					if tag_infos[:is_removed]
						tag_infos[:is_removed] = false
						tag_infos[:is_set] = false
					else
						tag_infos[:original_value] = tag_infos[:new_value]
					end
					
					tag_infos[:has_changed] = false
					tag_infos[:is_mixed] = false if tag_infos[:is_mixed]
				end
			else
				puts 'Nothing has changed, no file(s) written.'
			end
		when 'q'
			puts 'quitting'
			break
		when '?'
			puts
			puts 'i - show all tags.'
			puts 'e - edit all tags.'
			puts 'r - remove tags.'
			puts 'w - write - after edit, apply changes to the files.'
			puts 'q - quit without saving.'
			puts '? - print help.'
		else
			puts "WARNING: invalid input. Type '?' for help."
		end
		
		puts
		res = ask('[ierwq?] '){ |q|
			q.character = true
		}.downcase
	end
else
	files.each do |file|
		puts "Check file '#{file}'."
		
		changed = false
		tag = ID3Lib::Tag.new(file)
		options.select{ |tag_name, tag_value| /^set_tag_/.match(tag_name) }.each do |tag_name, tag_value|
			name = tag_name.sub(/^set_tag_/, '')
			tag.send("#{name}=", tag_value)
			changed = true
		end
		if options.has_key?('remove_all_tags')
			tag.delete_if{ true }
			changed = true
		else
			options.select{ |tag_name, tag_value| /^remove_tag_/.match(tag_name) }.each do |tag_name, tag_value|
				name = tag_name.sub(/^remove_tag_/, '')
				val = tag.send("#{name}")
				if !val.nil?
					tag.send("#{name}=", nil)
					changed = true
				end
			end
		end
		if changed
			puts "Write file '#{file}'."
			tag.update!
		end
	end
end
