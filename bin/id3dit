#!/usr/bin/env ruby
# coding: UTF-8

# WHY? WHHHHHYY is there no other solution
# to load requirements from the project directory?
Dir.chdir(File.expand_path('..', __dir__)) do
	require 'bundler/setup'
	require 'id3lib'
	require 'highline/import'
	require 'rainbow'
end

options = {
	:interactive => true,
}
opts = OptionParser.new do |opts|
	opts.banner =<<EOB
ID3 tags editor
Usage: id3dit [OPTIONS...] FILES...
EOB
	
	opts.separator('')
	opts.separator('Options:')
	
	ID3dit::USED_TAGS.each do |tag_name|
		opts.on("--#{tag_name} STRING", "Set new value for '#{tag_name}' tag.") do |v|
			options[:interactive] = false
			options["tag_#{tag_name}"] = v
		end
	end
	
	opts.on_tail('--version', 'Show version.') do
		puts "#{ID3dit::NAME} #{ID3dit::VERSION}"
		puts ID3dit::HOMEPAGE
		exit
	end
	
	opts.on_tail('-h', '--help', 'Show this message.') do
		puts opts
		exit 3
	end
end

opts.parse(ARGV)

files = []
ARGV.each do |arg|
	if File.exist?(arg)
		files << arg
	end
end

if files.count == 0
	opts.parse(['-h'])
end

if options[:interactive]
	infos = ID3dit::USED_TAGS.map{ |t|
		[t, {
			:new_value => nil,
			:original_value => nil,
			:is_set => false,
			:is_mixed => false,
			:has_changed => false,
		}] }.to_h
	
	files.each do |file|
		tag = ID3Lib::Tag.new(file)
		
		infos.each do |tag_name, tag_infos|
			field = tag.send(tag_name)
			
			if tag_infos[:is_set]
				if !tag_infos[:is_mixed]
					if field != tag_infos[:new_value]
						tag_infos[:is_mixed] = true
						tag_infos[:new_value] = nil
					end
				end
			else
				tag_infos[:is_set] = true
				tag_infos[:new_value] = tag_infos[:original_value] = field
			end
		end
	end
	
	res = 'i'
	while true
		
		case res
		when 'i'
			puts
			if files.count >= 2
				puts "#{files.count} songs selected"
			end
			
			puts
			infos.each do |tag_name, tag_infos|
				if tag_infos[:is_set] && (!tag_infos[:new_value].nil? || tag_infos[:is_mixed])
					printf "%12s    ", tag_name
					if tag_infos[:is_mixed]
						print '< Mixed >'
					else
						print "'" + Rainbow(tag_infos[:original_value]).bright + "'"
					end
					if tag_infos[:has_changed]
						print "  => '#{tag_infos[:new_value]}'"
					end
					puts
				end
			end
		when 'e'
			puts
			puts 'Type new value for tags. Leave blank for unchanged.'
			puts
			
			infos.each do |tag_name, tag_infos|
				printf "%12s    ", tag_name
				if tag_infos[:is_mixed]
					print '< Mixed >'
				else
					print "'" + Rainbow(tag_infos[:new_value]).bright + "'"
				end
				print '  '
				
				new_val = ask('')
				if new_val != ''
					printf "%12s    %s\n", "new #{tag_name}", new_val
					tag_infos[:has_changed] = true
					tag_infos[:new_value] = new_val
				end
			end
		when 'w'
			puts
			
			changed_infos = infos.select{ |tag_name, tag_infos| tag_infos[:has_changed] }
			if changed_infos.count > 0
				puts "write #{changed_infos.count} change(s)"
				files.each do |file|
					puts "write file '#{file}'"
					
					tag = ID3Lib::Tag.new(file)
					changed_infos.each do |tag_name, tag_infos|
						tag.send("#{tag_name}=", tag_infos[:new_value])
					end
					tag.update!
				end
				
				changed_infos.each do |tag_name, tag_infos|
					tag_infos[:original_value] = tag_infos[:new_value]
					tag_infos[:has_changed] = false
					tag_infos[:is_mixed] = false if tag_infos[:is_mixed]
				end
			else
				puts 'nothing has changed, no file(s) written'
			end
		when 'q'
			puts 'quitting'
			break
		when '?'
			puts
			puts 'i - show all tags'
			puts 'e - edit all tags'
			puts 'w - write - after edit, apply changes to the files'
			puts 'q - quit without saving'
			puts '? - print help'
		else
			puts "WARNING: invalid input. Type '?' for help."
		end
		
		puts
		res = ask('[iewq?] '){ |q|
			q.character = true
		}.downcase
	end
else
	puts 'write'
	files.each do |file|
		puts "write file '#{file}'"
		
		tag = ID3Lib::Tag.new(file)
		options.select{ |n, v| /^tag_/.match(n) }.each do |tag_name, tag_value|
			name = tag_name.sub(/^tag_/, '')
			tag.send("#{name}=", tag_value)
		end
		tag.update!
	end
end
